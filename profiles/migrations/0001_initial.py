# Generated by Django 2.2.12 on 2020-11-21 15:58

import ckeditor.fields
import cloudinary.models
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import embed_video.fields
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('NormalUser', 'NormalUser'), ('Agent', 'Agent'), ('PropertyManager', 'PropertyManager'), ('Design&servicePro', 'Design&servicePro'), ('Company', 'Company'), ('Admin', 'Admin')], default='NormalUser', max_length=20)),
                ('profile_image', models.ImageField(blank=True, upload_to='profile_images/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AgentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_image', models.ImageField(blank=True, upload_to='banner_images/')),
                ('phone', models.CharField(blank=True, max_length=13)),
                ('license_number', models.CharField(blank=True, max_length=250)),
                ('address', models.CharField(blank=True, max_length=250)),
                ('website_link', models.URLField(blank=True)),
                ('facebook_link', models.URLField(blank=True)),
                ('twitter_link', models.URLField(blank=True)),
                ('linkedin_link', models.URLField(blank=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('speciality', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('1', 'Buying and Selling of houses'), ('2', 'Renting houses'), ('3', 'Leasing office spaces'), ('4', 'Buying and selling of land')], default='1', max_length=7, null=True)),
                ('about', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('service_areas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('member_since', models.DateTimeField(auto_now_add=True)),
                ('account_type', models.CharField(choices=[('Basic', 'Basic'), ('Premium Agent', 'Premium Agent')], default='Basic', max_length=10)),
                ('featured_agent', models.BooleanField(blank=True, default=False, null=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='agent_followers', to=settings.AUTH_USER_MODEL)),
                ('saves', models.ManyToManyField(blank=True, related_name='agent_saves', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='agent_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'AgentProfiles',
            },
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_image', models.ImageField(blank=True, upload_to='banner_images/')),
                ('speciality', multiselectfield.db.fields.MultiSelectField(choices=[('Property Management', 'Property Management'), ('Agency', 'Agency'), ('Consultancy', 'Consultancy')], default='Property Management', max_length=100)),
                ('phone', models.CharField(blank=True, max_length=13)),
                ('license_number', models.CharField(blank=True, max_length=250)),
                ('address', models.CharField(blank=True, max_length=250)),
                ('website_link', models.URLField(blank=True)),
                ('facebook_link', models.URLField(blank=True)),
                ('twitter_link', models.URLField(blank=True)),
                ('linkedin_link', models.URLField(blank=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('about', ckeditor.fields.RichTextField(blank=True)),
                ('service_areas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('member_since', models.DateTimeField(auto_now_add=True)),
                ('account_type', models.CharField(choices=[('Basic', 'Basic'), ('Premium Agent', 'Premium Agent')], default='Basic', max_length=10)),
                ('featured_business', models.BooleanField(blank=True, default=False, null=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='company_followers', to=settings.AUTH_USER_MODEL)),
                ('saves', models.ManyToManyField(blank=True, related_name='company_saves', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='company_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'CompanyProfiles',
            },
        ),
        migrations.CreateModel(
            name='DesignAndServiceProProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_image', models.ImageField(blank=True, upload_to='banner_images/')),
                ('phone', models.CharField(blank=True, max_length=13, null=True)),
                ('address', models.CharField(blank=True, max_length=250, null=True)),
                ('website_link', models.URLField(blank=True, null=True)),
                ('facebook_link', models.URLField(blank=True, null=True)),
                ('twitter_link', models.URLField(blank=True, null=True)),
                ('instagram_link', models.URLField(blank=True, null=True)),
                ('linkedin_link', models.URLField(blank=True, null=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('about', ckeditor.fields.RichTextField(blank=True)),
                ('service_areas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('member_since', models.DateTimeField(auto_now_add=True)),
                ('account_type', models.CharField(choices=[('Basic', 'Basic'), ('Premium account', 'Premium account')], default='Basic', max_length=10)),
                ('pro_speciality', models.CharField(blank=True, choices=[('Interior Designer', 'Interior Designer'), ('Architect', 'Architect'), ('Landscape architect', 'Landscape architect'), ('Home mover', 'Home mover'), ('Plumbing', 'Plumbing'), ('Photographer', 'Photographer')], max_length=20, null=True)),
                ('featured_pro', models.BooleanField(blank=True, default=False, null=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='ds_followers', to=settings.AUTH_USER_MODEL)),
                ('saves', models.ManyToManyField(blank=True, related_name='ds_saves', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='DService_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'DesignAndServiceProProfiles',
            },
        ),
        migrations.CreateModel(
            name='DesignAndServiceProProjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(max_length=50, null=True)),
                ('project_cost', models.PositiveIntegerField(null=True)),
                ('project_description', models.TextField(null=True)),
                ('project_video', embed_video.fields.EmbedVideoField(blank=True, null=True)),
                ('project_location', models.CharField(max_length=200, null=True)),
                ('project_map_point', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('project_year', models.CharField(max_length=4, null=True, validators=[django.core.validators.RegexValidator('^\\d{1,10}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='DS_project_ls_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'DesignAndServiceProProjects',
            },
        ),
        migrations.CreateModel(
            name='PMPortfolio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_name', models.CharField(max_length=50, null=True)),
                ('property_market_value', models.PositiveIntegerField(null=True)),
                ('property_location', models.CharField(max_length=200, null=True)),
                ('property_map_point', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('currently_managing', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=3, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='PM_portfolio_ls_creator', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'PMPortfolio',
            },
        ),
        migrations.CreateModel(
            name='PropertyManagerProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner_image', models.ImageField(blank=True, upload_to='banner_images/')),
                ('phone', models.CharField(blank=True, max_length=13)),
                ('license_number', models.CharField(blank=True, max_length=250)),
                ('address', models.CharField(blank=True, max_length=250)),
                ('website_link', models.URLField(blank=True)),
                ('facebook_link', models.URLField(blank=True)),
                ('twitter_link', models.URLField(blank=True)),
                ('linkedin_link', models.URLField(blank=True)),
                ('location', django.contrib.gis.db.models.fields.PointField(null=True, srid=4326)),
                ('about', ckeditor.fields.RichTextField(blank=True)),
                ('service_areas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('member_since', models.DateTimeField(auto_now_add=True)),
                ('account_type', models.CharField(choices=[('Basic', 'Basic'), ('Premium Manager', 'Premium Manager')], default='Basic', max_length=10)),
                ('featured_agent', models.BooleanField(blank=True, default=False, null=True)),
                ('followers', models.ManyToManyField(blank=True, related_name='pm_followers', to=settings.AUTH_USER_MODEL)),
                ('saves', models.ManyToManyField(blank=True, related_name='pm_saves', to=settings.AUTH_USER_MODEL)),
                ('user', models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='pm_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'PropertyManagerProfiles',
            },
        ),
        migrations.CreateModel(
            name='TeammateConnection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receiver_accepted', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, null=True)),
                ('starred', models.BooleanField(blank=True, default=False, null=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='join_team_request_receiver', to=settings.AUTH_USER_MODEL)),
                ('requestor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='join_team_requestor', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyManagerTopClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_logo', cloudinary.models.CloudinaryField(max_length=255, verbose_name='image')),
                ('client_name', models.CharField(max_length=25)),
                ('business_category', models.CharField(max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pm_top_clients', to='profiles.PropertyManagerProfile')),
            ],
            options={
                'verbose_name_plural': 'PropertyManagerTopClients',
            },
        ),
        migrations.CreateModel(
            name='PropertyManagerReviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 'Never'), (2, 'Not likely'), (3, 'Mybe'), (4, 'Likely'), (5, 'Highly likely')], null=True)),
                ('responsive_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('communication_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('attention_to_detail', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('service', models.CharField(choices=[('1', 'Helped me find tenants.'), ('2', 'Helped me find a rental.'), ('3', 'Consultation.'), ('4', 'Listed my property on Rehgien.'), ('5', 'None. Reached out but agent never responded.'), ('6', 'Managed(s) my property.'), ('7', 'Other real estate service.')], max_length=50, null=True)),
                ('comment', models.TextField(null=True)),
                ('date_of_service', models.DateField(null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pm_review', to='profiles.PropertyManagerProfile')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pm_review_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'PropertyManagerReviews',
            },
        ),
        migrations.CreateModel(
            name='PMPortfolioImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property_image', cloudinary.models.CloudinaryField(blank=True, max_length=255, verbose_name='image')),
                ('portfolio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='PM_porfolio_Images', to='profiles.PMPortfolio')),
            ],
        ),
        migrations.CreateModel(
            name='DSTopClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_logo', cloudinary.models.CloudinaryField(max_length=255, verbose_name='image')),
                ('client_name', models.CharField(max_length=25)),
                ('business_category', models.CharField(max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ds_top_clients', to='profiles.DesignAndServiceProProfile')),
            ],
            options={
                'verbose_name_plural': 'DSTopClients',
            },
        ),
        migrations.CreateModel(
            name='DSProProjectImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_image', cloudinary.models.CloudinaryField(blank=True, max_length=255, verbose_name='image')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DS_project_Images', to='profiles.DesignAndServiceProProjects')),
            ],
        ),
        migrations.CreateModel(
            name='DesignAndServiceProReviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 'Never'), (2, 'Not likely'), (3, 'Mybe'), (4, 'Likely'), (5, 'Highly likely')], null=True)),
                ('quality_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('creativity_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('attention_to_detail', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('comment', models.TextField(null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='DService_review', to='profiles.DesignAndServiceProProfile')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='DService_review_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'DesignAndServiceProReviews',
            },
        ),
        migrations.CreateModel(
            name='CompanyTopClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_logo', cloudinary.models.CloudinaryField(max_length=255, verbose_name='image')),
                ('client_name', models.CharField(max_length=25)),
                ('business_category', models.CharField(max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='co_top_clients', to='profiles.CompanyProfile')),
            ],
            options={
                'verbose_name_plural': 'CompanyTopClients',
            },
        ),
        migrations.CreateModel(
            name='CompanyReviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 'Never'), (2, 'Not likely'), (3, 'Mybe'), (4, 'Likely'), (5, 'Highly likely')], null=True)),
                ('responsive_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('knowledge_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('negotiation_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('professionalism_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('service', models.CharField(choices=[('1', 'Helped me sell my home.'), ('2', 'Helped me find tenants.'), ('3', 'Helped me buy a home.'), ('4', 'Helped me find a rental.'), ('5', 'Consultation.'), ('6', 'Listed my property on Rehgien.'), ('7', 'None. Reached out but never responded.'), ('8', 'Managed(s) my property.')], max_length=50, null=True)),
                ('comment', models.TextField(null=True)),
                ('date_of_service', models.DateField(null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_review', to='profiles.CompanyProfile')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review_company', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'CompanyReviews',
            },
        ),
        migrations.CreateModel(
            name='AgentTopClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_logo', cloudinary.models.CloudinaryField(max_length=255, verbose_name='image')),
                ('client_name', models.CharField(max_length=25)),
                ('business_category', models.CharField(max_length=25)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ag_top_clients', to='profiles.AgentProfile')),
            ],
            options={
                'verbose_name_plural': 'AgentTopClients',
            },
        ),
        migrations.CreateModel(
            name='AgentReviews',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 'Never'), (2, 'Not likely'), (3, 'Mybe'), (4, 'Likely'), (5, 'Highly likely')], null=True)),
                ('responsive_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('knowledge_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('negotiation_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('professionalism_rating', models.PositiveIntegerField(choices=[(1, 'Very poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Very good')], null=True)),
                ('service', models.CharField(choices=[('1', 'Helped me sell my home.'), ('2', 'Helped me find tenants.'), ('3', 'Helped me buy a home.'), ('4', 'Helped me find a rental.'), ('5', 'Consultation.'), ('6', 'Listed my property on Rehgien.'), ('7', 'None. Reached out but agent never responded.'), ('8', 'Managed(s) my property.')], max_length=50, null=True)),
                ('comment', models.TextField(null=True)),
                ('date_of_service', models.DateField(null=True)),
                ('review_date', models.DateTimeField(auto_now_add=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_review', to='profiles.AgentProfile')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='review_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'AgentReviews',
            },
        ),
        migrations.CreateModel(
            name='PropertyManagerBusinessHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], null=True)),
                ('from_hour', models.TimeField(blank=True, null=True)),
                ('to_hour', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pm_business_hours', to='profiles.PropertyManagerProfile')),
            ],
            options={
                'verbose_name_plural': 'PropertyManagerBusinessHours',
                'ordering': ('weekday', 'from_hour'),
                'unique_together': {('weekday', 'from_hour', 'to_hour')},
            },
        ),
        migrations.CreateModel(
            name='DSBusinessHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], null=True)),
                ('from_hour', models.TimeField(blank=True, null=True)),
                ('to_hour', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='DS_business_hours', to='profiles.DesignAndServiceProProfile')),
            ],
            options={
                'verbose_name_plural': 'DSBusinessHours',
                'ordering': ('weekday', 'from_hour'),
                'unique_together': {('weekday', 'from_hour', 'to_hour')},
            },
        ),
        migrations.CreateModel(
            name='CompanyBusinessHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], null=True)),
                ('from_hour', models.TimeField(blank=True, null=True)),
                ('to_hour', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='co_business_hours', to='profiles.CompanyProfile')),
            ],
            options={
                'verbose_name_plural': 'CompanyBusinessHours',
                'ordering': ('weekday', 'from_hour'),
                'unique_together': {('weekday', 'from_hour', 'to_hour')},
            },
        ),
        migrations.CreateModel(
            name='AgentBusinessHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], null=True)),
                ('from_hour', models.TimeField(blank=True, null=True)),
                ('to_hour', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ag_business_hours', to='profiles.AgentProfile')),
            ],
            options={
                'verbose_name_plural': 'AgentBusinessHours',
                'ordering': ('weekday', 'from_hour'),
                'unique_together': {('weekday', 'from_hour', 'to_hour')},
            },
        ),
    ]
